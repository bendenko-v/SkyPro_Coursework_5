from abc import ABC, abstractmethod

from classes.units import UnitClass
from classes.equipment import Weapon, Armor


class BaseUnit(ABC):
    """
    Base Unit Class
    """

    def __init__(self, name: str, unit_class: UnitClass):
        self.name = name
        self.unit_class = unit_class
        self.hp = unit_class.max_health
        self.stamina = unit_class.max_stamina
        self.weapon: Weapon
        self.armor: Armor
        self._is_skill_used = False

    @property
    def health_points(self) -> float:
        """
        Returns unit HP
        """
        return self.hp

    @property
    def stamina_points(self) -> float:
        """
        Returns unit Stamina
        """
        return self.stamina

    def equip_weapon(self, weapon: Weapon) -> None:
        """
        Equip Weapon to Hero
        """
        self.weapon = weapon

    def equip_armor(self, armor: Armor) -> None:
        """
        Equip Armor to Hero
        """
        self.armor = armor

    def _count_damage(self, target) -> float | None:
        """
        Calculates the damage the user will deal to an enemy or vice versa.
        If the hero has enough stamina to use the weapon -> calculate damage
        Reduce the hero's stamina
        If the enemy has enough stamina to use the armor -> calculate defence
        Reduce the enemy's stamina
        Use get_damage() method to reduce enemy's HP
        or return None if the hero's stamina is not enough
        """
        if self.stamina_points < self.weapon.stamina_per_hit:
            return None

        damage = round(self.weapon.damage * self.unit_class.attack, 1)
        self.stamina = round(self.stamina_points - self.weapon.stamina_per_hit, 1)

        if target.stamina_points >= target.armor.stamina_per_turn:
            defence = round(target.armor.defence * target.unit_class.armor, 1)
            target.stamina = round(target.stamina_points - target.armor.stamina_per_turn, 1)
        else:
            defence = 0

        damage = round(damage - defence, 1)
        target.get_damage(damage)
        return damage

    def get_damage(self, damage: float) -> None:
        """
        Hero gets a damage
        Args:
            damage: damage points
        """
        # TODO –ø–æ–ª—É—á–µ–Ω–∏–µ —É—Ä–æ–Ω–∞ —Ü–µ–ª—å—é
        #      –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –∞—Ç—Ç—Ä–∏–±—É—Ç–∞ self.hp
        if damage > 0:
            if self.hp - damage >= 0:
                self.hp = round(self.hp - damage, 1)
            else:
                self.hp = 0

    @abstractmethod
    def hit(self, target) -> str:
        pass

    def use_skill(self, target) -> str:
        """
        Hero uses a skill

        Args:
            target: BaseUnit, who is trying to use the skill

        Returns:
            the result of use (or info that the skill was used)
        """
        """
        –º–µ—Ç–æ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —É–º–µ–Ω–∏—è.
        –µ—Å–ª–∏ —É–º–µ–Ω–∏–µ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç—Ä–æ–∫—É
        –ù–∞–≤—ã–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω
        –ï—Å–ª–∏ –∂–µ —É–º–µ–Ω–∏–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Ç–æ–≥–¥–∞ –≤—ã–ø–æ–ª–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é
        self.unit_class.skill.use(user=self, target=target)
        –∏ —É–∂–µ —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤–µ—Ä–Ω–µ–º –Ω–∞–º —Å—Ç—Ä–æ–∫—É –∫–æ—Ç–æ—Ä–∞—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏–∑—É–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —É–º–µ–Ω–∏—è
        """
        if self._is_skill_used:
            return 'üåÄ The skill has already been used!<br>'

        return self.unit_class.skill.use(user=self, target=target)
